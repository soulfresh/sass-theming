
/// Get one of standard measurements (sizes) from the theme.
/// Ex: `margin: size(xxl);`
/// @param {string} $size
@function size($size: m) {
  $s: map-get($palette-size, $size);

  @if $s == null {
    @error('Could not find measurement/size #{$size} on the theme provided: #{$palette-size}');
  }

  @return rem($s);
}

/// Get a border radius from the theme
/// @param {string} $size
@function radius($size: m) {
  $s: map-get($palette-radius, $size);

  @if $s == null {
    @error('Could not find measurement/size #{$size} on the theme provided: #{$palette-radius}');
  }

  @return rem($s);
}

/// Get an icon size from the theme
/// @param {string} $size
@function icon-size($size: m) {
  $s: map-get($palette-icon-size, $size);

  @if $s == null {
    @error('Could not find measurement/size #{$size} on the theme provided: #{$palette-icon-size}');
  }

  @return rem($s);
}

/// Get a breakpoint from the theme
/// @param {string} $size
@function breakpoint($size: m) {
  $s: map-get($breakpoint, $size);

  @if $s == null {
    @error('Could not find breakpoint #{$size} on the theme provided: #{$palette-breakpoint}');
  }

  @return rem($s);
}

/// Minimum breakpoint width. Null for the smallest (first) breakpoint.
///  >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
///  576px
/// @access private
@function breakpoint-min($name, $breakpoints: $palette-breakpoint) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min * 1px, null);
}

/// Make the given @content apply to the given breakpoint and wider.
/// @param {string} $name
@mixin breakpoint-up($name: m, $breakpoints: $palette-breakpoint) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  }
  @else {
    @content;
  }
}

