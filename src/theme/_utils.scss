/// URL encode a color value.
/// @param {string} $string - The string to encode
@function encodecolor($string) {
  @if type-of($string) == 'color' {
    $hex: str-slice(ie-hex-str($string), 4);
    $string: unquote("#{$hex}");
  }
  $string: '%23' + $string;
  @return $string;
}

/// Generate a dropdown arrow image. By default it will draw a
/// downward triangle but you can change this with the `$style`
/// parameter.
/// Style options are:
/// - 'triangle'
/// - 'chevron'
/// @param {color} $color [currentColor] - The color of the arrow.
/// @param {boolean} $style [triangle] - The style of arrow image to draw. One of 'triangle', 'chevron'.
/// @param {string} $line-join [miter] - The stroke-line join to use. One of 'miter', 'round', 'bevel', 'miter-clip', 'arcs'
/// @param {string} $line-cap [square] - The linke-cap to use. One of 'butt', 'square', 'round'.
/// @param {number} $stroke-width [2px] - The width of the stroke if using the 'chevron' style.
@function dropdown-arrow-icon(
  $color: currentColor,
  $style: 'triangle',
  $line-join: miter,
  $line-cap: square,
  $stroke-width: 2px,
) {
  $c: if($color != currentColor, encodecolor($color), $color);

  // The styles for the svg.
  $s: if(
    $style == 'triangle',
    'fill:#{$c};stroke:#{$c};stroke-width:#{$stroke-width};stroke-linejoin:#{$line-join};stroke-linecap:#{$line-cap};',
    'fill: none;stroke:#{$c};stroke-width:#{$stroke-width};stroke-linejoin:#{$line-join};stroke-linecap:#{$line-cap};'
  );

  // The path shape to use.
  $d: if($style == 'triangle', 'M9,1l-4,4l-4,-4l8,0Z', 'M9 1L5 5L1 1');

  @return url("data:image/svg+xml,%3Csvg width='100%25' height='100%25' viewBox='0 0 10 6' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%0A%3E%3Cpath style='#{$s};' d='#{$d}'/%3E%3C/svg%3E");
}

/// Adds a background down arrow icon that can be
/// used for dropdown elements. The arrow is right aligned
/// to the bounding box.
/// @param {color} $color [currentColor] - The color of the arrow.
/// @param {boolean} $style [triangle] - The style of arrow image to draw. One of 'triangle', 'chevron'.
/// @param {string} $line-join [miter] - The stroke-line join to use. One of 'miter', 'round', 'bevel', 'miter-clip', 'arcs'
/// @param {string} $line-cap [square] - The linke-cap to use. One of 'butt', 'square', 'round'.
/// @param {number} $stroke-width [2px] - The width of the stroke if using the 'chevron' style.
/// @param {number} $arrow-width [10px] - The width of the arrow svg.
@mixin down-arrow(
  $color: 'currentColor',
  $style: 'triangle',
  $line-join: 'miter',
  $line-cap: 'square',
  $stroke-width: 2px,
  $arrow-width: 10px,
) {
  background-image: dropdown-arrow-icon($color, $style, $line-join, $line-cap, $stroke-width);
  background-size: $arrow-width;
  background-repeat: no-repeat;
  background-position: right 0 top 50%;
}

/// The select-background mixin allows you to customize the
/// background of a `<select>` element, including the drop down
/// arrow. It sets the `background` property of the element with
/// an arrow icon and background coloring because this is the most
/// cross browser consitent way to style Select elements. Additionally,
/// this mixin will set the padding of the input in order to fit
/// the custom down arrow image. Lastly, it will also set the
/// `text-overflow`, `white-space` and `overflow` to support
/// ellipsis.
///
/// @param {number} $padding-sides [5px] - The left and right padding around the input. This will be used on the left edge and either side of the arrow.
/// @param {number} $padding-vertical - The top and bottom padding. If not set, the save value as the sides will be used.
/// @param {string} $arrow-style [triangle] - The arrow shape to use. One of `triangle`, `chevron`.
/// @param {number} $arrow-width [10px] - The width of the arrow shape.
/// @param {color} $arrow-color [currentColor] - The color of the arrow shape.
/// @param {string} $line-join [miter] - The `stroke-linejoin` to use for the arrow.
/// @param {string} $line-cap [square] - The `stroke-linecap` to use for the arrow.
/// @param {number} $stroke-width [2px] - The `stroke-width` to use from the arrow.
/// @param {color} $bg-color [white] - The background color of the select element.
/// @param {color} $bg-color-hover [white] - The background color of the select element when hovered.
/// @param {color} $bg-color-focus [white] - The background color of the select element when focused.
@mixin select-background(
  $padding-vertical: null,
  $padding-sides: 5px,
  $arrow-style: 'triangle',
  $arrow-width: 10px,
  $arrow-color: black,
  $line-join: miter,
  $line-cap: square,
  $stroke-width: 2px,
  $bg-color: white,
  $bg-color-hover: white,
  $bg-color-focus: white,
) {
  $padding-vertical: if($padding-vertical == null, $padding-sides, $padding-vertical);
  $arrow-icon: dropdown-arrow-icon($arrow-color, $arrow-style, $line-join, $line-cap);
  $padding-right: $padding-sides * 2 + $arrow-width;
  // Use a linear-gradient as the background color in order to prevent
  // Firefox from changing the options menu coloring.
  $background-color: linear-gradient(to bottom, #{$bg-color} 0%, #{$bg-color} 100%);
  $background-color-hover: linear-gradient(to bottom, #{$bg-color-hover} 0%, #{$bg-color-hover} 100%);
  $background-color-focus: linear-gradient(to bottom, #{$bg-color-focus} 0%, #{$bg-color-focus} 100%);

  // Hide the default down arrow.
  -webkit-appearance: none;
  -moz-appearance: none;
  -ms-expand: none;

  background-image: $arrow-icon, $background-color;
  background-position: right #{$padding-sides} top 50%, 0 0;
  background-repeat: no-repeat, repeat;
  background-size: $arrow-width, 100%;
  padding: $padding-vertical $padding-right $padding-vertical $padding-sides;
  cursor: pointer;

  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

/// Short cut to defining hover + focus + active styling.
/// An additional class selector is also added so you
/// can programatically emulate this styling.
/// @param {string} $class - The class name that can be used to simulate the active state.
/// @param {boolean} $global - Whether to the class name is global if you are using css modules.
@mixin active($class: 'active', $global: true) {
  @if $global {
    &:global(.#{$class}),
    &:hover,
    &:focus,
    &:active {
      @content;
    }
  }
  @else {
    &.#{$class},
    &:hover,
    &:focus,
    &:active {
      @content;
    }
  }
}

/// Add ellipsis to an element. This
/// will force the element to be a single
/// line of text (it is not possible
/// to add ellipses to multiline text with CSS).
@mixin ellipsis {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

/// Fade out an element and make it unclickable.
@mixin disabled {
  opacity: 0.2;
  cursor: default;
  pointer-events: none;
}

/// Center the elements inside a
/// container by making it a flex
/// element.
@mixin flex-centered {
  display: flex;
  align-items: center;
  justify-content: center;
}

/// Make an element fill its parent
/// using fixed positioning. This is
/// good for covering an element.
@mixin fixed-fill {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

/// Make an element fill its parent
/// using absolute positioning.
@mixin absolute-fill {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

/// Center the element inside a container
/// using absolute positioning.
@mixin absolute-centered {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/// Represents a horizontal row of elements
/// where the contents are justified with
/// space-between so they align to the edges
/// of the browser.
@mixin row() {
  display: flex;
  justify-content: space-between;
}

/// Represents flex items arranged in a column.
@mixin flex-column() {
  display: flex;
  flex-direction: column;
}

/// Generates an HSL color string. Useful
/// if you don't want SCSS to convert HSL
/// values to HEX.
/// @param {number} $hue
/// @param {number} $saturation
/// @param {number} $lightness
@function hsls($hue, $saturation, $lightness) {
  @return unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");
}

/// Make a "ul" or "ol" element look like a regular "div".
@mixin unbulleted-list {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

/// Make button look like a regular "div"
@mixin unstyled-button {
  background: none;
  border: none;
  border-radius: 0;
  outline: none;
}

/// Make an image fill it's parent container
/// and make sure the parent container background
/// is not visible (image fills the container).
@mixin cover-image {
  object-fit: cover;
  width: 100%;
  height: 100%;
}

/// Make an image fill it's parent container
/// and make sure the image is fully visible
/// in the parent container (it should show
/// the parent container background if necessary).
@mixin contain-image {
  object-fit: contain;
  width: 100%;
  height: 100%;
}

/// When printing, Firefox needs top level DOM
/// elements to be block level elements in order
/// for page breaks to work as expected. Therefore,
/// this mixin should be included in the top level
/// elements leading up to nodes where the
/// `printer-page` mixin is used.
@mixin print-wrapper {
  @media print {
    display: block;
  }
}

/// Consistent margins for printer pages.
@mixin printer-page-margins {
  @media print {
    margin: 0;
    padding: size(xxl) size(m);
  }
}

/// Forces a page break when printing and sets
/// consistent margins for the page. This assumes
/// that the element that includes this mixin
/// contains all contents for the page. You can
/// also include any additional styles you want
/// by invoking this mixin with a content block.
@mixin printer-page {
  @include printer-page-margins;

  @media print {
    break-before: page;
    page-break-before: always;
    @content;
  }
}

/// Hides the current element when printing.
@mixin printer-hidden {
  @media print {
    display: none;
  }
}

