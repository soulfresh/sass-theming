@import 'theme';

.sfForegroundPalette,
.sfBackgroundPalette,
.sfPalette {
  font-family: sans-serif;
  display: inline-block;
  margin-right: size(m);
  margin-bottom: size(m);
}

.sfPalette {
  width: 200px;
}

.sfBackgroundPalette,
.sfForegroundPalette {
  width: 320px;
}

.sfGradientsPalette,
.sfShadowsPalette {
  width: 400px;

  .color {
    margin: size(m) !important;
    border-bottom: none !important;
  }
}

.paletteTitle {
  margin: 0;
  padding: size(m) 0 size(xs) size(xs);
}

@mixin generate-background-color-palettes($palettes, $theme: $theme-light, $selector: background-color, $qualifier: '') {
  @each $paletteName in $palettes {
    $palette: map-get($theme, $paletteName);
    @each $name, $value in $palette {
      .color-palette.#{$paletteName}#{$qualifier} {
        .color.hue-#{$name} {
          #{$selector}: $value;

          &::after {
            content: '#{$value}';
          }
        }
      }
    }
  }
}

.sfPalette {
  @include generate-background-color-palettes(foreground, $theme-light, color);
  @include generate-background-color-palettes(foreground, $theme-dark, color, '.dark');
  $standard-palettes: primary, secondary, focus, grayscale, success, warn, error;
  @include generate-background-color-palettes($standard-palettes);
  @include generate-background-color-palettes(background, $theme-light, background-color);
  @include generate-background-color-palettes(background, $theme-dark, background-color, '.dark');
  @include generate-background-color-palettes(shadows, $theme-light, box-shadow);
  @include generate-background-color-palettes(shadows, $theme-dark, box-shadow, '.dark');
  @include generate-background-color-palettes(gradients, $theme-light, background);
  @include generate-background-color-palettes(gradients, $theme-dark, background, '.dark');

  .color {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: size(xxs);
    margin: 0;

    &::after {
      margin-left: size(m);
      color: foreground(light-text);
      font-size: font-size(xs);
      text-transform: lowercase;
    }

    &:not(:last-child) {
      border-bottom: 1px solid foreground(border);
    }

    &.hue-800,
    &.hue-900 {
      color: foreground-dark();

      &::after {
        color: foreground-dark();
      }
    }
  }

  .color-palette {
    @include unbulleted-list;
    display: inline-block;
    margin: 0;
    padding: size(xxxs);
    width: 100%;
    border: 1px solid foreground(border);

    &.dark {
      color: foreground-dark();
      background-color: background-dark();

      .values {
        color: foreground-dark();
      }

      .color {
        &::after {
          color: foreground-dark(light-text);
        }
      }
    }
  }
}
